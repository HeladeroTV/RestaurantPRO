-- === COMANDOS SQL PARA CREAR LA BASE DE DATOS COMPLETA ===

-- 1. CREAR LA TABLA 'mesas'
-- Almacena la información de las mesas físicas y la mesa virtual.
CREATE TABLE mesas (
    id SERIAL PRIMARY KEY,
    numero INTEGER NOT NULL UNIQUE, -- Ej: 1, 2, ..., 6, 99
    capacidad INTEGER NOT NULL DEFAULT 1, -- Número de comensales
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insertar mesas iniciales (físicas y virtual)
INSERT INTO mesas (numero, capacidad) VALUES
(1, 2), (2, 2), (3, 4), (4, 4), (5, 6), (6, 6), (99, 100); -- Mesa virtual

-- 2. CREAR LA TABLA 'menu'
-- Almacena los items disponibles en el menú.
CREATE TABLE menu (
    id SERIAL PRIMARY KEY,
    nombre TEXT NOT NULL UNIQUE,
    precio REAL NOT NULL,
    tipo TEXT NOT NULL -- Ej: 'Entradas', 'Platos Fuertes', 'Postres', 'Bebidas'
);

-- 3. CREAR LA TABLA 'clientes'
-- Almacena la información de los clientes registrados.
CREATE TABLE clientes (
    id SERIAL PRIMARY KEY,
    nombre TEXT NOT NULL,
    domicilio TEXT,
    celular TEXT,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 4. CREAR LA TABLA 'pedidos'
-- Almacena cada pedido realizado.
CREATE TABLE pedidos (
    id SERIAL PRIMARY KEY,
    mesa_numero INTEGER NOT NULL,
    cliente_id INTEGER, -- Puede ser NULL si no es cliente registrado o es pedido digital
    estado TEXT NOT NULL DEFAULT 'Tomando pedido', -- 'Tomando pedido', 'Pendiente', 'En preparacion', 'Listo', 'Entregado', 'Pagado'
    fecha_hora TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    items JSONB NOT NULL DEFAULT '[]'::jsonb, -- Almacena el array de ítems como JSON
    numero_app INTEGER, -- Para identificar pedidos de la app digital (asignado cuando mesa_numero = 99)
    notas TEXT DEFAULT '', -- Notas del pedido
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Útil para rastrear modificaciones
    FOREIGN KEY (mesa_numero) REFERENCES mesas(numero) ON DELETE SET NULL, -- Si se borra la mesa, el pedido queda sin mesa
    FOREIGN KEY (cliente_id) REFERENCES clientes(id) ON DELETE SET NULL -- Si se borra el cliente, el pedido queda sin cliente
);

-- Índices para optimizar consultas comunes
CREATE INDEX idx_pedidos_estado_fecha ON pedidos (estado, fecha_hora DESC);
CREATE INDEX idx_pedidos_mesa_estado_activos ON pedidos (mesa_numero, estado) WHERE estado IN ('Pendiente', 'En preparacion', 'Listo');

-- 5. CREAR LA TABLA 'inventario'
-- Almacena los items del inventario.
CREATE TABLE inventario (
    id SERIAL PRIMARY KEY,
    nombre TEXT NOT NULL UNIQUE, -- Nombre del ingrediente o producto
    descripcion TEXT,
    cantidad_disponible REAL NOT NULL DEFAULT 0,
    unidad_medida TEXT NOT NULL, -- Ej: 'kg', 'g', 'lt', 'ml', 'unidades', 'docenas'
    cantidad_minima REAL DEFAULT 0, -- Nivel mínimo antes de alertar
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 6. CREAR LA TABLA 'recetas'
-- Almacena las recetas de los platos.
CREATE TABLE recetas (
    id SERIAL PRIMARY KEY,
    nombre TEXT NOT NULL UNIQUE, -- Nombre del plato del menú
    descripcion TEXT,
    instrucciones TEXT -- Pasos para preparar el plato
);

-- 7. CREAR LA TABLA 'ingredientes_recetas'
-- Relaciona los ingredientes (del inventario) con las recetas.
CREATE TABLE ingredientes_recetas (
    id SERIAL PRIMARY KEY,
    receta_id INTEGER NOT NULL,
    ingrediente_id INTEGER NOT NULL,
    cantidad_necesaria REAL NOT NULL, -- Cantidad necesaria del ingrediente para la receta
    unidad_medida_necesaria TEXT NOT NULL, -- Unidad de medida necesaria (puede ser diferente a la del inventario)
    FOREIGN KEY (receta_id) REFERENCES recetas(id) ON DELETE CASCADE,
    FOREIGN KEY (ingrediente_id) REFERENCES inventario(id) ON DELETE RESTRICT
);

-- 8. CREAR LA TABLA 'configuraciones'
-- Almacena configuraciones generales del sistema, específicamente para listas de ingredientes.
CREATE TABLE configuraciones (
    id SERIAL PRIMARY KEY,
    nombre TEXT NOT NULL UNIQUE,          -- Nombre de la configuración (ej: "Stock Inicial", "Promo Semanal")
    descripcion TEXT,                     -- Descripción de la configuración
    ingredientes JSONB NOT NULL DEFAULT '[]'::jsonb  -- Array de ingredientes como JSON: [{"nombre": "...", "cantidad": ..., "unidad": "..."}, ...]
);

-- Opcional: Insertar una configuración de ejemplo
-- INSERT INTO configuraciones (nombre, descripcion, ingredientes) VALUES
-- ('Stock Basico', 'Ingredientes iniciales comunes', '[{"nombre": "Pollo", "cantidad": 10, "unidad": "kg"}, {"nombre": "Arroz", "cantidad": 5, "unidad": "kg"}]');

-- 9. (Opcional) Inicializar el menú con algunos items de ejemplo
-- Puedes usar el endpoint /menu/inicializar de backend.py para esto también.
-- INSERT INTO menu (nombre, precio, tipo) VALUES
-- ('Empanada Kunai', 70.00, 'Entradas'),
-- ('Camarones roca', 160.00, 'Platillos'),
-- ('Yakimeshi Especial', 150.00, 'Arroces');